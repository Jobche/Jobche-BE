buildscript {
    ext {
        kotlinVersion = '1.3.10'
        springBootVersion = '2.1.0.RELEASE'
        gradleDockerVersion = '1.2'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}")
        classpath("se.transmode.gradle:gradle-docker:${gradleDockerVersion}")
    }
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: "kotlin-jpa"
apply plugin: 'eclipse-wtp'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'war'
apply plugin: 'docker'

group = 'bg.elsys'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

repositories {
    mavenCentral()
}

configurations {
    providedRuntime
}

ext {
    kotlinTestVersion = '1.3.10'
    junitVersion = '5.1.1'
    assertJVersion = '3.11.1'
    mockitoVersion = '1.8.13.kotlin13'
    swaggerVersion = "2.9.2"
    oauthVersion = "2.3.4.RELEASE"
    s3mockVersion = "0.2.4"
    awsVersion = '1.11.228'
}

dependencyManagement {
    imports {
        mavenBom "com.amazonaws:aws-java-sdk-bom:${awsVersion}"
    }
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-actuator')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('com.fasterxml.jackson.module:jackson-module-kotlin')
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    implementation("org.jetbrains.kotlin:kotlin-reflect")
    implementation("io.springfox:springfox-swagger2:${swaggerVersion}")
    implementation("io.springfox:springfox-swagger-ui:${swaggerVersion}")
    implementation("com.amazonaws:aws-java-sdk-s3")
    implementation("commons-io:commons-io:2.5")
    runtimeOnly('org.postgresql:postgresql')
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

    testCompile("io.findify:s3mock_2.12:${s3mockVersion}")
    testCompile("org.assertj:assertj-core:${assertJVersion}")
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation("io.mockk:mockk:${mockitoVersion}")
}

task buildDocker(type: Docker, dependsOn: build) {
    push = false
    applicationName = "pu6ki/jobche"
    dockerfile = file('src/main/docker/Dockerfile')
    tag = "${applicationName}"
    tagVersion = "latest"
    doFirst {
        copy {
            from war
            into stageDir
        }
        copy {
            from file('/Users/rhubenov/.aws/credentials')
            into stageDir
        }
        copy {
            from file('/Users/rhubenov/.aws/config')
            into stageDir
        }
    }
}
